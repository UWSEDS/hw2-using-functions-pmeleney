"""
This module downloads the latest National, State, and Puerto Rico Commonwealth
population totals dataset from www.census.gov and loads the data into a dataframe.
The module also provides a testing function to ensure that the download
operated correctly.
"""

import pandas as pd
import urllib

def download():
	print('downloading csv file from www.census.gov...')
	url = 'https://www2.census.gov/programs-surveys/popest/datasets/2010-2018/national/totals/nst-est2018-alldata.csv'
	urllib.request.urlretrieve(url, 'data/us_population.csv')
	print('download complete')
	df = pd.read_csv('data/us_population.csv')
	return df

def test_create_dataframe(df):

	#Column names
	df_columns = ['SUMLEV',
				'REGION',
				'DIVISION',
				'STATE',
				'NAME',
				'CENSUS2010POP',
				'ESTIMATESBASE2010',
				'POPESTIMATE2010',
				'POPESTIMATE2011',
				'POPESTIMATE2012',
				'POPESTIMATE2013',
				'POPESTIMATE2014',
				'POPESTIMATE2015',
				'POPESTIMATE2016',
				'POPESTIMATE2017',
				'POPESTIMATE2018',
				'NPOPCHG_2010',
				'NPOPCHG_2011',
				'NPOPCHG_2012',
				'NPOPCHG_2013',
				'NPOPCHG_2014',
				'NPOPCHG_2015',
				'NPOPCHG_2016',
				'NPOPCHG_2017',
				'NPOPCHG_2018',
				'BIRTHS2010',
				'BIRTHS2011',
				'BIRTHS2012',
				'BIRTHS2013',
				'BIRTHS2014',
				'BIRTHS2015',
				'BIRTHS2016',
				'BIRTHS2017',
				'BIRTHS2018',
				'DEATHS2010',
				'DEATHS2011',
				'DEATHS2012',
				'DEATHS2013',
				'DEATHS2014',
				'DEATHS2015',
				'DEATHS2016',
				'DEATHS2017',
				'DEATHS2018',
				'NATURALINC2010',
				'NATURALINC2011',
				'NATURALINC2012',
				'NATURALINC2013',
				'NATURALINC2014',
				'NATURALINC2015',
				'NATURALINC2016',
				'NATURALINC2017',
				'NATURALINC2018',
				'INTERNATIONALMIG2010',
				'INTERNATIONALMIG2011',
				'INTERNATIONALMIG2012',
				'INTERNATIONALMIG2013',
				'INTERNATIONALMIG2014',
				'INTERNATIONALMIG2015',
				'INTERNATIONALMIG2016',
				'INTERNATIONALMIG2017',
				'INTERNATIONALMIG2018',
				'DOMESTICMIG2010',
				'DOMESTICMIG2011',
				'DOMESTICMIG2012',
				'DOMESTICMIG2013',
				'DOMESTICMIG2014',
				'DOMESTICMIG2015',
				'DOMESTICMIG2016',
				'DOMESTICMIG2017',
				'DOMESTICMIG2018',
				'NETMIG2010',
				'NETMIG2011',
				'NETMIG2012',
				'NETMIG2013',
				'NETMIG2014',
				'NETMIG2015',
				'NETMIG2016',
				'NETMIG2017',
				'NETMIG2018',
				'RESIDUAL2010',
				'RESIDUAL2011',
				'RESIDUAL2012',
				'RESIDUAL2013',
				'RESIDUAL2014',
				'RESIDUAL2015',
				'RESIDUAL2016',
				'RESIDUAL2017',
				'RESIDUAL2018',
				'RBIRTH2011',
				'RBIRTH2012',
				'RBIRTH2013',
				'RBIRTH2014',
				'RBIRTH2015',
				'RBIRTH2016',
				'RBIRTH2017',
				'RBIRTH2018',
				'RDEATH2011',
				'RDEATH2012',
				'RDEATH2013',
				'RDEATH2014',
				'RDEATH2015',
				'RDEATH2016',
				'RDEATH2017',
				'RDEATH2018',
				'RNATURALINC2011',
				'RNATURALINC2012',
				'RNATURALINC2013',
				'RNATURALINC2014',
				'RNATURALINC2015',
				'RNATURALINC2016',
				'RNATURALINC2017',
				'RNATURALINC2018',
				'RINTERNATIONALMIG2011',
				'RINTERNATIONALMIG2012',
				'RINTERNATIONALMIG2013',
				'RINTERNATIONALMIG2014',
				'RINTERNATIONALMIG2015',
				'RINTERNATIONALMIG2016',
				'RINTERNATIONALMIG2017',
				'RINTERNATIONALMIG2018',
				'RDOMESTICMIG2011',
				'RDOMESTICMIG2012',
				'RDOMESTICMIG2013',
				'RDOMESTICMIG2014',
				'RDOMESTICMIG2015',
				'RDOMESTICMIG2016',
				'RDOMESTICMIG2017',
				'RDOMESTICMIG2018',
				'RNETMIG2011',
				'RNETMIG2012',
				'RNETMIG2013',
				'RNETMIG2014',
				'RNETMIG2015',
				'RNETMIG2016',
				'RNETMIG2017',
				'RNETMIG2018']

	#Column dtypes
	df_col_dtypes = ['int64',
					'object',
					'object',
					'int64',
					'object',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'int64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64',
					'float64']

	#Check (1) column names are as expected
	#(2) column dtypes are as expected
	#(3) dataframe has at least 10 rows
    
	for col in df.columns:
		if col in df_columns:
			pass
		else:
			return False

	for col in df_columns:
		if col in df.columns:
			pass
		else:
			return False

	dict_dtypes = dict(zip(df_columns, df_col_dtypes))

	for col in dict_dtypes.keys():
		if dict_dtypes[col] == df[col].dtype:
			pass
		else:
			return False

	if df.shape[0] >= 10:
		return True
	else:
		return False


if __name__ == '__main__':
	download()
	